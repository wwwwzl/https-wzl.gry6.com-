<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[PHP函数 头发长见识少系列]]></title>
    <url>%2F2020%2F01%2F13%2FPHP%E5%87%BD%E6%95%B0%20%E5%A4%B4%E5%8F%91%E9%95%BF%E8%A7%81%E8%AF%86%E5%B0%91%E7%B3%BB%E5%88%97%2F</url>
    <content type="text"><![CDATA[PHP函数 头发长见识少系列数组类型 array_filer 123array_filter ( array $array [, callable $callback [, int $flag = 0 ]] ) : array 依次将 array 数组中的每个值传递到 callback 函数。如果 callback 函数返回 true，则 array 数组的当前值会被包含在返回的结果数组中。数组的键名保留不变。 call_user_func_array 123456789101112131415161718&lt;?phpfunction foobar($arg, $arg2) &#123; echo __FUNCTION__, " got $arg and $arg2\n";&#125;class foo &#123; function bar($arg, $arg2) &#123; echo __METHOD__, " got $arg and $arg2\n"; &#125;&#125;// Call the foobar() function with 2 argumentscall_user_func_array("foobar", array("one", "two"));// Call the $foo-&gt;bar() method with 2 arguments$foo = new foo;call_user_func_array(array($foo, "bar"), array("three", "four"));?&gt; array_column() 类似于laravel集合的 pluck() 12$ary = Array(['id'=&gt;111,'name'=&gt;'wang','age'=&gt;11,],['id'=&gt;222,'name'=&gt;'zi','age'=&gt;22,],['id'=&gt;333,'name'=&gt;'long','age'=&gt;33,]);$name = array_column($ary,'name','id'); // [[111]=&gt;'wang',[222]=&gt;'zi',[333]=&gt;'long'] array_search() 在数组中搜索键值 “”，并返回它的键名 和 array_cloumn 配合 可以查找二维数组的元素常用在 mysql结果的查找 123// 用上面的数组$name = array_column($ary,'id','name');print_r(array_search(333,$name)); // long array_slice() 数组分页 12345$page = 1;$pagesize = 1;$count = count($ary);//总条数$start= ($page-1) * $pagesize;//偏移量，当前页-1乘以每页显示条数$article = array_slice($ary,$start,$pagesize,true); // 第四个参数 是 是否保留原来的键 接收post1file_get_contents('php://input');]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Mysql_DQL]]></title>
    <url>%2F2020%2F01%2F12%2Fmysql_DQL%2F</url>
    <content type="text"><![CDATA[Mysql_DQL DQL（data query language）数据查询语言 select操作 Select select 单独应⽤ 1234&gt; select @@port; -- 查看mysql 端口&gt; select @@version; -- 查看mysql版本&gt; show variables; -- 语句查看系统变量及其值。&gt; show variables like &apos;%innodb%&apos;; -- like 模糊匹配 只要匹配到innodb 这几个字符 就显示 select 函数() 123&gt; select now(); -- 显示当前时间;&gt; select database(); -- 查看当前在那个库&gt; select version(); -- 显示当前版本; SQL92标准的使⽤语法select 语法执⾏顺序（单表）select的时候追加字段1&gt; select *,&apos;值&apos; as 字段别名 from 表名; from1&gt; select * from 表名; -- 查找整张表的所有字段 1&gt; select 字段1,字段2 from 表名; -- 查找整张表的指定字段 1&gt; select 字段1 as &apos;别名&apos;,字段2 as &apos;别名2&apos; from 表名; -- 查找整张表的指定字段并且显示别名 where 配合 等值查询（=） 1&gt; select * from 表名 where ID=1(条件); -- 查找该表 id=1 的数据 配合 不等值（&lt; &gt; &lt;= &gt;= !=） 1234&gt; select * from 表名 where age &lt; 16; -- 查找该表 年龄小于16 的数据&gt; select * from 表名 where age = 16; -- 查找该表 年龄等于16 的数据&gt; select * from 表名 where age != 16; -- 查找该表 年龄不等于16 的数据&gt; select * from 表名 where age &gt; 16; -- 查找该表 年龄大于16 的数据 配合 模糊（like） 查询姓名以往开头的所有信息 注意：like 语句在MySQL中，不要出现%在前⾯的情况，因为效率极低，%王% ！！！！！！！ 1&gt; select * from 表名 where name like &apos;王%&apos;; -- 查找该表姓王的同学 配合 逻辑连接符（and or）12&gt; select * from 表名 where age &gt; 15 and age &lt; 22; -- 查找该表 年纪大于15 **并且** 小于22的 同学&gt; select * from 表名 where age &gt; 15 or age &lt; 22; -- 查找该表 年纪大于15 **或者** 小于22的 同学 group by 配合聚合函数使⽤（常⽤的聚合函数avg(), sum(),count(),max(),min()） 12345&gt; select sex, sum(age) from 表名 group by sex; -- 统计男人 年纪 和 女人 年纪的总和&gt; select sex, count(name) from 表名 group by sex; -- 统计男人有多少个 和 女人有多少个&gt; select sex, avg(age) from 表名 group by name; -- 统计男人平均年龄 和 女人平均年龄&gt; select sex, max(age) from 表名 group by sex; -- 统计男人最 **大** 年纪是多少 和 女人最 **大** 年纪是多少&gt; select sex, min(age) from 表名 group by sex; -- 统计男人最 **小** 年纪是多少 和 女人最 **小** 年纪是多少 having 配合group by 使用 在group by 统计过后 在筛选结果 1&gt; select age, count(id) as &apos;num&apos; from 表名 group by age having age &gt; 19; -- 统计该表各个年龄有多少人 并且 显示年纪大于19岁的 order by 排序 12&gt; select * from 表名 order by age; -- 查找该表所有数据 并且 按年纪 正序排列 ase&gt; select * from 表名 order by age desc; -- 查找该表所有数据 并且 按年纪 倒序排列 limit 分页 123&gt; select * from 表名 limit 5; -- 取该表前五条数据 0,5&gt; select * from 表名 limit 2,2; -- 取该表数据 从第3条开始 往后取2条&gt; select * from 表名 limit 2 offset 0, -- 取该表的数据 offset 从哪里开始取 limit 取几条 函数 concat() 1&gt; select *,CONCAT(name,&apos;-&apos;,age,&apos;-&apos;,sex) from 表名; -- 字段拼接 内连接join1&gt; select teacher.tname,course.cname from teacher join course on teacher.tno=course.tno where teacher.tname=&apos;micheal&apos;; -- 查询tearch表 和 course表的内容 条件是 tearch的tno = course.tno 和 teacher.tname = &apos;micheal&apos;; 作业]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mysql 基本操作]]></title>
    <url>%2F2020%2F01%2F10%2FMysql%E5%9F%BA%E7%A1%80%E8%AF%AD%E5%8F%A5%2F</url>
    <content type="text"><![CDATA[mysql 基本操作修改密码在忘记本身密码的情况下 关闭数据库 1systemctl stop mysqld 启动数据库到维护模式 12&gt; mysqld_safe --skip-grant-tables --skip-networking &amp;&gt; mysql 登录并修改密码 12&gt; USE mysql;&gt; update user set authentication_string=password(&apos;123456&apos;), password_expired=&apos;N&apos; where user=&apos;root&apos;; 刷新权限并退出 1&gt; flush privileges; 在不登陆Mysql的情况下在外部修改密码 用mysqladmin 12345&gt; mysqladmin -u 用户名 -p 旧密码 password 新密码 &gt; mysqladmin -u root -p password 123456 &gt; 会提示你让你输入新密码;&gt; 完成后如果提示 waring 就说明成功了; 如果提示找不到mysqladmin命令 1&gt; ln -s /usr/local/mysql/bin/mysql /usr/bin SQL语句 数据查询语言DQL 数据查询语言DQL基本结构是由SELECT子句，FROM子句，WHERE子句组成的查询块： SELECT &lt;字段名表&gt;FROM &lt;表或视图名&gt;WHERE &lt;查询条件&gt; 数据操纵语言DML 数据操纵语言DML主要有三种形式： 插入：INSERT更新：UPDATE删除：DELETE 数据定义语言DDL 数据定义语言DDL用来创建数据库中的各种对象—–表、视图、索引、同义词、聚簇等如： CREATE TABLE/VIEW/INDEX/SYN/CLUSTER表 视图 索引 同义词 簇 DDL操作是隐性提交的！不能rollback 数据控制语言DCL 数据控制语言DCL用来授予或回收访问数据库的某种特权，并控制数据库操纵事务发生的时间及效果，对数据库实行监视等。如： 1) GRANT：授权。 2) ROLLBACK [WORK] TO [SAVEPOINT]：回退到某一点。回滚—ROLLBACK回滚命令使数据库状态回到上次最后提交的状态。其格式为：SQL&gt;ROLLBACK; 3) COMIT [WORK]：提交。 库与表库 查看所有库 1&gt; SHOW DATABASE; 查看某个库的属性 1&gt; SHOW CREATE DATABASE 库名 查看某个库下所有的表 1&gt; SHOW TABLE STATUS FROM 库名 进入某个库 1&gt; USE 库名 新建一个数据库 1&gt; CREATE DATABASE 库名 CHARSET=utf8mb4; 查看当前在哪个库里 1&gt; SELECT DATABASE(); 表 查看当前库里所有的表 1&gt; SHOW TABLES; 查看表的属性 1&gt; SHOW CREATE TABLE 表名 表属性 存储引擎 InnoDB (Mysql5.5以后默认) Mysam (Mysql5.5以前默认) 字符集 charset = utf8mb4 (一般网站都是这个字符集) 查看数据表所有列的属性 12&gt; DESC 表名&gt; SHOW FULL COLUMNS FROM 表名; 列的属性和约束 主键： primary key (PK) 说明:唯⼀⾮空,数字列,整数列,⽆关列,⾃增的 ,是⼀种约束，也是⼀种索引类型，在⼀张表中只能有⼀个主键。一般用于id ⾮空： not null 说明: 我们建议，对于普通列来讲，尽量设置not null 默认值 default ： 数字列的默认值使⽤0 ,字符串类型，设置为⼀个nil null 唯⼀：unique 不能重复 ⾃增 auto_increment 针对数字列，⾃动⽣成顺序值,一般跟主键同时使用 ⽆符号 unsigned 针对数字列 注释 comment 库的操作创建数据库 创建数据库 1&gt; CREATE DATABASE 库名 CHARSET utf8mb4; 查看库 查看当前所有库 1&gt; SHOW DATABASES; 查看库的属性 1&gt; SHOW CREATE DATABASE 库名 --DQL ​ 3.查看某个库下所有的表的属性 1&gt; SHOW FULL COLUMNS FROM 表名; 修改库 改库 1&gt; ALTER DATABASE 库名 CHARSET 修改的字符集 删除库 删库 1忘掉 表的操作增加表 创建表 (要求创建⼀个学⽣表，包含学号，姓名，年龄，性别) 123456&gt; create table student( ID int not null primary key auto_increment comment &apos;学号&apos;, name varchar(255) not null comment &apos;姓名&apos;, age int unsigned not null default 0 comment &apos;年龄&apos;, sex enum(&apos;m&apos;,&apos;f&apos;) not null default &apos;m&apos; comment &apos;性别&apos; )charset=utf8mb4; 查看 查看表里的字段 12&gt; DESC 表名 -- 不带备注&gt; SHOW FULL COLUMNS FROM 表名 -- 带备注 修改表 添加字段 1&gt; ALTER TABLE 表名 ADD 字段 CHAR(11) NOT NULL UNIQUE COMMENT &apos;备注&apos;; 修改字段 1&gt; ALTER TABLE 表名 CHANGE 字段名 新字段名 CHAR(11) NOT NULL; 只修改字段属性 1&gt; ALTER TABLE 表名 MODIFY 字段 新属性 NOT NULL; 修改字段的位置 12&gt; ALTER TABLE 表名 MODIFY 字段 属性 AFTER 字段 -- 在哪个字段后面添加&gt; ALTER TABLE 表名 MODIFY 字段 属性 FIRST -- 把字段放在第一位 删除字段 删除字段 1&gt; ALTER TABLE 表名 DROP COLUMN 字段, .... ; -- 删除多个字段用,隔开 删除表1&gt; 重命名表1&gt; ALTER TABLE 表名 RENAME 新表名 DML 数据操作语⾔添加数据 insert (添加数据) 1&gt; INSERT INTO 表名(字段1,字段2,...) VALUES(&apos;字段1&apos;,&apos;字段2&apos;,....) -- 字段你要跟表的字段顺序一一对应 如果多条就(),(); 查看数据 select 1&gt; SELECT * FROM 表名 修改数据 update 1&gt; UPDATE 表名 SET 字段=新值 WHERE 条件 -- 修改时一定要加 where 条件否则修改整张表 删除数据 delete 1&gt; DELETE FROM 表名 WHERE 条件 -- 删除时一定要加 where 条件 否则删除整张表后果自负 truncate 1&gt; TRUNCATE TABLE 表名 -- 这个不用加where条件 因为默认就是删除整张表 区别： delete 逻辑删除慢，逐⾏的删除，不会降低⾃增⻓的起始值，效率低，碎⽚较多，会 影响到性能 truncate 物理删除，将标段中的区进⾏清空，不会产⽣碎⽚，性能较⾼，但只能全部清 空]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>Mysql</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker基本命令]]></title>
    <url>%2F2019%2F12%2F10%2FDocker%2F</url>
    <content type="text"><![CDATA[安装 安装依赖 ​ docker依赖于系统的一些必要的工具，可以提前安装。 1yum install -y yum-utils device-mapper-persistent-data lvm2 添加软件源 1yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo 安装docker-ce 1yum clean all yum makecache fastyum -y install docker-ce 启动服务 123通过systemctl启动服务systemctl start docker 查看安装版本 1234这样子就安装成功了，启动服务以后可以使用docker version查看一下当前的版本。&gt; docker version&gt; docker info docker命令基础命令docker images – 查看容器1&gt; docker images; ## 查看所有镜像 docker ps – 查看运行中的容器1234&gt; docker ps [OPTIONS]; ## 查看所有运行的容器;&gt; -a; ## 显示所有的容器，包括未运行的 -a all的意思 &gt; -f; ## 根据条件过滤显示的内容。&gt; -q; ## 静默模式，只显示容器编号。 docker search – 搜索容器123&gt; docker search [OPTIONS] 容器名; ## 搜索容器&gt; --no-trunc ## 显示完整的镜像描述； &gt; -s num ##列出收藏数不小于指定值的镜像。 docker pull – 拉取容器12&gt; docker pull [OPTIONS] NAME; ## 从镜像仓库中拉取或者更新指定镜像 &gt; -a ## 拉取所有 tagged 镜像 docker push1&gt; docker push [OPTIONS] NAME; ## 将本地的镜像上传到镜像仓库,要先登陆到镜像仓库 docker load1&gt; docker load --input fedora.tar ## 导入指定文件到docker里 docker save12&gt; docker save -o nginx.tar nginx:latest # 其中-o和&gt;表示输出到文件，nginx.tar为目标文件，nginx:latest是源镜像名（name:tag）&gt; docker save &gt; nginx.tar nginx:latest docker rm | rmi 12&gt; docker rmi images_id # 删除一个images的镜像&gt; docker rm $(docker ps -qa) # 删除启动的所有镜像 docker run12345&gt; docker run -d -p 端口号(宿主机):端口号(容器) 容器id; # 启动一个容器 如果没有就自动pull一个&gt; --name 别名 # 给容器设置一个别名&gt; --net=host # 网络模式&gt; -v 本地路径:容器路径 # 将本地的文件映射到容器里;&gt; --link 容器:别名; # 将容器关联起来 docker inspect1&gt; docker inspect 容器ID或容器名 | grep '"IPAddress"' # 查看容器内网ip docker exec1&gt; docker exec -it 容器id /bin/bash # 进入到容器内部 docker cp12&gt; docker cp 96f7f14e99ab:/www /tmp/ # 将容器96f7f14e99ab的/www目录拷贝到主机的/tmp目录中。&gt; docker cp /www/runoob 96f7f14e99ab:/www/ #将主机/www/runoob目录拷贝到容器96f7f14e99ab的/www目录下。 docker start | restart | stop123&gt; docker start 容器id # 启动一个容器&gt; docker stop 容器id # 关闭一个容器&gt; docker restart 容器id # 容器一个容器]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[O阿里短信类]]></title>
    <url>%2F2019%2F11%2F04%2F%E9%98%BF%E9%87%8C%E7%9F%AD%E4%BF%A1%E7%B1%BB%2F</url>
    <content type="text"><![CDATA[安装sdk1composer require alibabacloud/client 直接拿走用 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136&lt;?php/** * Created by PhpStorm. * User: Administrator * Date: 2019/4/15 0015 * Time: 下午 4:34 */namespace App\Handlers;use AlibabaCloud\Client\AlibabaCloud;use AlibabaCloud\Client\Exception\ClientException;use AlibabaCloud\Client\Exception\ServerException;use http\Env\Response;use Illuminate\Http\Request;use Illuminate\Support\Facades\Cache;class AliSmsHandlers&#123; protected $accessKeyId = 'keyid'; protected $accessSecret = 'secret'; public function __construct() &#123; AlibabaCloud::accessKeyClient($this-&gt;accessKeyId, $this-&gt;accessSecret) -&gt;regionId('cn-hangzhou') -&gt;asGlobalClient(); &#125; /** 发送短信 * @param $PhoneNumbers * @param $SignName * @param string $TemplateCode * @param $TemplateParam * @return array|string */ private function scode($PhoneNumbers,$SignName,$TemplateCode = 'SMS_140695110',$TemplateParam) &#123; try &#123; $result = AlibabaCloud::rpcRequest() -&gt;product('Dysmsapi') // -&gt;scheme('https') // https | http -&gt;version('2017-05-25') -&gt;action('SendSms') -&gt;method('POST') -&gt;options([ 'query' =&gt; [ 'PhoneNumbers' =&gt; $PhoneNumbers, 'SignName' =&gt; $SignName, 'TemplateCode' =&gt; $TemplateCode, 'TemplateParam' =&gt; $TemplateParam, ], ]) -&gt;request(); return $result-&gt;toArray(); &#125; catch (ClientException $e) &#123; return $e-&gt;getErrorMessage() . PHP_EOL; &#125; catch (ServerException $e) &#123; return $e-&gt;getErrorMessage() . PHP_EOL; &#125; &#125; private function notice($PhoneNumberJson,$SignNameJson,$TemplateCode,$TemplateParamJson) &#123; try &#123; $result = AlibabaCloud::rpcRequest() -&gt;product('Dysmsapi') // -&gt;scheme('https') // https | http -&gt;version('2017-05-25') -&gt;action('SendBatchSms') -&gt;method('POST') -&gt;options([ 'query' =&gt; [ 'RegionId' =&gt; 'cn-hangzhou', 'PhoneNumberJson' =&gt; $PhoneNumberJson, 'SignNameJson' =&gt; $SignNameJson, 'TemplateCode' =&gt; $TemplateCode, 'TemplateParamJson' =&gt; $TemplateParamJson, ], ]) -&gt;request(); return $result-&gt;toArray(); &#125; catch (ClientException $e) &#123; return $e-&gt;getErrorMessage() . PHP_EOL; &#125; catch (ServerException $e) &#123; return $e-&gt;getErrorMessage() . PHP_EOL; &#125; &#125; /** 发送验证码短信 * @param Request $request * @return array */ public function sendMessages($phone,$time = 300) &#123; $code['code'] = mt_rand(999,9999); //调用短信接口获取返回信息 $res = $this-&gt;scode($phone,'短信title','短信模板',json_encode($code)); if($res['Message'] != 'OK')&#123; return false; &#125; Cache::put('code_'.$phone,$code['code'],$time); //写入缓存 return true; &#125; public function getMessages($phone) &#123; return $code = Cache::get('code_'.$phone); //读取验证码缓存 &#125; /** 验证码验证 * @param $phone * @param $newCode * @return bool */ public function isMessages($phone,$newCode) &#123; $code = Cache::get('code_'.$phone); //读取验证码缓存 if(!$newCode || $code != $newCode)&#123; return false; &#125; return true; &#125; public function apiSendMessages($phone,$time = 300) &#123; $code['code'] = mt_rand(999,9999); //调用短信接口获取返回信息 $res = $this-&gt;scode($phone,'领游帮','SMS_140695110',json_encode($code)); if($res['Message'] != 'OK' )&#123; return Response()-&gt;json(['code'=&gt;400,'msg'=&gt;'发送失败'])-&gt;setEncodingOptions(JSON_UNESCAPED_UNICODE); &#125; Cache::put('code_'.$phone,$code['code'],$time); //写入缓存 return Response()-&gt;json(['code'=&gt;200,'msg'=&gt;'发送成功','phoneCode'=&gt; $code['code']])-&gt;setEncodingOptions(JSON_UNESCAPED_UNICODE); &#125;&#125;]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>Laravel</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[OBS推流_客户端拉流]]></title>
    <url>%2F2019%2F09%2F17%2FOBS%E6%8E%A8%E6%B5%81_%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%8B%89%E6%B5%81%2F</url>
    <content type="text"><![CDATA[1 修改nginx配置(nginx.conf)使之支持rtmp和hls; 在server模块中增加：1234567891011121314151617location /hls &#123; types &#123; application/vnd.apple.mpegurl m3u8; video/mp2t ts; &#125; alias /home/wwwroot/default/hls/live01/; #视频流文件目录(自己创建) expires -1; add_header Cache-Control no-cache; &#125; 在末尾增加模块：12345678910111213141516171819202122rtmp &#123; server &#123; listen 1935; #监听的端口 chunk_size 4000; application hls &#123;#rtmp推流请求路径 live on; hls on; hls_path /home/wwwroot/default/hls/live01; #视频流文件目录(自己创建) hls_fragment 3s; &#125; &#125; &#125; 2 在其它电脑安装obs 使用obs推到 rtmp://服务器地址:1935/hls/ 流秘钥 live01 3 可以使用vlc播放或在网页中播放。 媒体流播放地址为http://服务器地址/hls/live01.m3u8 网页中视频地址为http://服务器地址/hls/live01.m3u8 网页中播放需要使用插件，ckplayer等 首先说下HLS协议： 简单讲就是把整个流分成一个个小的，基于 HTTP 的文件来下载，每次只下载一些，前面提到了用于 H5 播放直播视频时引入的一个 .m3u8 的文件，这个文件就是基于 HLS 协议，存放视频流元数据的文件。 每一个 .m3u8 文件，分别对应若干个 ts 文件，这些 ts 文件才是真正存放视频的数据，m3u8 文件只是存放了一些 ts 文件的配置信息和相关路径，当视频播放时，.m3u8 是动态改变的，video 标签会解析这个文件，并找到对应的 ts 文件来播放，所以一般为了加快速度，.m3u8 放在 web 服务器上，ts 文件放在 cdn 上。 .m3u8 文件，其实就是以 UTF-8 编码的 m3u 文件，这个文件本身不能播放，只是存放了播放信息的文本文件：1234567 #EXTM3U m3u文件头#EXT-X-MEDIA-SEQUENCE 第一个TS分片的序列号#EXT-X-TARGETDURATION 每个分片TS的最大的时长#EXT-X-ALLOW-CACHE 是否允许cache#EXT-X-ENDLIST m3u8文件结束符#EXTINF 指定每个媒体段(ts)的持续时间（秒），仅对其后面的URI有效mystream-12.ts```]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>直播</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Nginx增加rtmp协议]]></title>
    <url>%2F2019%2F09%2F17%2Fnginx_%E5%A2%9E%E5%8A%A0rtmp%E5%8D%8F%E8%AE%AE%2F</url>
    <content type="text"><![CDATA[注意必须是HTTPS 才能开启通知 有时我们需要在现有的web服务器上增加新的模块实现更为丰富的功能，Nginx算是比较常用的web服务器，但是nginx也不仅仅只可以做web服务器，只要有对应的插件还可用作反向代理、即时通讯、文件下载、流媒体服务等功能，如果已经安装好了Nginx有不想重新安装覆盖的前提下如何新增模块呢?下面通过安装nginx-rtmp-module作为示例进行说明，安装其他模块也是同样的道理。 首先就是先下载nginx-rtmp-module 官方github地址：https://github.com/arut/nginx-rtmp-module 安装：nginx nginx的官方网站为：http://nginx.org/en/download.html 12345wget http://nginx.org/download/nginx-1.12.1.tar.gz tar -zxvf nginx-1.12.1.tar.gz cd nginx-1.12.1 ./configure --prefix=/usr/local/nginx --add-module=/nginx-rtmp-module --with-http_ssl_module make &amp;&amp; make install 如果你已经安装好nginx，那么需要单独安装第三方模块，不能重新安装 nginx第三方模块安装方法： ./configure –prefix=/你的安装目录 –add-module=/第三方模块目录以安装nginx-rtmp-module模块为例，在已安装nginx情况下安装nginx-rtmp-module模块因为以前nginx安装在/usr/local/nginx目录下，所以下面的操作都是以此目录为路径进行操作，如果安装到其他目录有些命令需要做对应的更改。先查看原有nginx的配置参数并拷贝出来（重要）注意V 是大写的 12/usr/local/nginx/sbin/nginx -V把结果复制出来 上面显示我们之前安装的nginx 版本是 1.12.1 我们要使用对应版本的 nginx 的安装包 123wget http://nginx.org/download/nginx-1.12.1.tar.gz //版本根据自己的-V更换tar -zxvf nginx-1.12.1.tar.gz cd nginx-1.12.1 下载完成，并解压后 进入到 nginx-1.12.1 目录 接下来是重要的一步,将我们上面 原先安装的nginx配置参数 上，添加新的模块(根据自己实际情况) 1./configure arguments: --user=www --group=www --prefix=/usr/local/nginx --with-openssl=/usr/local/nginx/src/openssl --add-module=/usr/local/nginx/src/ngx_devel_kit --add-module=/usr/local/nginx/src/lua_nginx_module --add-module=/nginx-rtmp-module --add-module=/usr/local/nginx/src/ngx_cache_purge --add-module=/usr/local/nginx/src/nginx-sticky-module --add-module=/usr/local/nginx/src/nginx-http-concat --with-http_stub_status_module --with-http_ssl_module --with-http_v2_module --with-http_gzip_static_module --with-http_gunzip_module --with-stream --with-stream_ssl_module --with-ipv6 --with-http_sub_module --with-http_flv_module --with-http_addition_module --with-http_realip_module --with-http_mp4_module --with-ld-opt=-Wl,-E --with-cc-opt=-Wno-error --with-ld-opt=-ljemalloc 注意，里面我 加了一个参数 –add-module=/nginx-rtmp-module 如果你有其他模块要一起安装，方法是一样的。 等待配置跑完。然后输入 MAKE 进行编译。编译完成后，我们需要在根目录下我们刚下载的 /nginx-1.12.1/objs/ 目录下。找到刚刚编译好的 nginx 文件（ 没有扩展名）将 nginx 文件复制到 我们之前安装的 /usr/local/nginx/sbin/ 目录，替换旧的 nginx 文件。建议备份一下旧的 nginx 文件。 然后重启下nginx 就好了。 这个时候我们在查看下nginx 配置。 1nginx -V //我们看到 nginx-rtmp-module 模块已经有了。]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo文章加密]]></title>
    <url>%2F2019%2F08%2F24%2FHexo%E6%96%87%E7%AB%A0%E5%8A%A0%E5%AF%86%20%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[editormd_编辑器使用]]></title>
    <url>%2F2019%2F08%2F24%2Feditormd%E7%BC%96%E8%BE%91%E5%99%A8%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[下载完成后引入123&lt;script src="https://cdn.bootcss.com/jquery/3.4.1/jquery.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/editormd.js"&gt;&lt;/script&gt; &lt;link rel="stylesheet" href="./lib/editor.md-master/css/editormd.css"&gt; THML 部分 注意文件上传 写的是接口地址 然后接口负责文件移动1234567891011121314151617181920212223242526272829303132333435363738394041424344454647&lt;div class="panel-body"&gt; &lt;div id="test-editormd" style=""&gt; &lt;textarea class="editormd-html-textarea" name="text"&gt;&lt;/textarea&gt; &lt;/div&gt;&lt;/div&gt;&lt;script&gt; var testEditor1; testEditor1 = editormd("test-editormd", &#123; placeholder:'', //默认显示的文字，这里就不解释了 width: "100%", height: document.documentElement.clientHeight-100, syncScrolling: "single", path: "./lib/editor.md-master/lib/", //你的path路径（原资源文件中lib包在我们项目中所放的位置） watch : true, autoFocus : false, emoji : true, saveHTMLToTextarea : true, imageUpload : true, imageFormats : ["jpg", "jpeg", "png", "bmp", "webp"], imageUploadURL : "./api/upload_api.php",//注意你后端的上传图片服务地址 // editorTheme: "pastel-on-dark", // theme: "gray", // previewTheme: "dark", tex: true, toolbarIcons : function() &#123; //自定义工具栏，后面有详细介绍 return editormd.toolbarModes['full']; // full, simple, mini &#125;, &#125;);&lt;/script&gt;------------------------------json返回的格式if($file) &#123; $data = [ 'success' =&gt; 1, // 0 表示上传失败，1 表示上传成功 'message' =&gt; "上传成功", 'url' =&gt; $url // 上传成功时才返回 ]; echo json_encode($data,JSON_UNESCAPED_UNICODE); die;&#125; else &#123; $data = [ 'success' =&gt; 0, // 0 表示上传失败，1 表示上传成功 'message' =&gt; "上传失败", ]; echo json_encode($data,JSON_UNESCAPED_UNICODE); die;&#125; 关于表情 图片不显示的问题-先下载emoji表情包 放在 editor.md-master/plugins/emoji-dialog 修改editormd.js文件 改成http路径 要么不显示1234editormd.emoji = &#123; path : "http://localhost/6-26gongxiang/emoji/", ext : ".png" &#125;; HTML 显示引入12345678910 &lt;link rel="stylesheet" href="./lib/editor.md-master/css/editormd.css" /&gt; &lt;script src="./lib/editor.md-master/lib/flowchart.min.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/lib/jquery.flowchart.min.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/lib/marked.min.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/lib/prettify.min.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/lib/raphael.min.js"&gt;&lt;/ &lt;script src="./lib/editor.md-master/lib/underscore.min.js"&gt;&lt;/script&gt; &lt;script src="./lib/editor.md-master/editormd.min.js"&gt;&lt;/script&gt;&lt;!-- ---------------注意这个坑 写在上面就报错-------------- --&gt; &lt;script src="./lib/editor.md-master/lib/sequence-diagram.min.js"&gt;&lt;/script&gt; HTML12345678910111213141516171819 &lt;div id="doc-content"&gt; &lt;textarea style="display:none;"&gt; &lt;?= $res_content[0]['content'] ?&gt; &lt;!--$&#123;content/&#125;为获取后台的md格式内容。--&gt; &lt;/textarea&gt; &lt;/div&gt;&lt;script&gt; var testEditor; $(function () &#123; testEditor = editormd.markdownToHTML("doc-content", &#123;//注意：这里是上面DIV的id htmlDecode: "style,script,iframe", emoji: true, taskList: true, tex: true, // 默认不解析 flowChart: true, // 默认不解析 sequenceDiagram: true, // 默认不解析 codeFold: true, &#125;);&#125;);&lt;/script&gt;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo排坑]]></title>
    <url>%2F2019%2F08%2F23%2Fhexo%E6%8E%92%E5%9D%91%2F</url>
    <content type="text"><![CDATA[输入密码，查看文章。 Incorrect Password! No content to display! ]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux下vim配置]]></title>
    <url>%2F2019%2F08%2F21%2Flinux%E4%B8%8B%E9%85%8D%E7%BD%AEVIM%2F</url>
    <content type="text"><![CDATA[下载配置文件1234567#!/bin/bash git clone --recursive https://github.com/Leptune/vim-for-coding.git ~/vim-for-coding cd ~ mv .vim .vimbak &amp;&gt; /dev/null mv .vimrc .vimrcbak &amp;&gt; /dev/null mv vim-for-coding .vim ln -s .vim/vimrc .vimrc 一分钟极速安装 (如果是windows，强烈推荐安装BabunShell)1curl https://raw.githubusercontent.com/Leptune/vim-for-coding/master/install.sh|sh 等程序执行完成之后就可以使用比较简单配置之后的vim了。 在这个文件里面开始是没有东西的，在这里面可以添加用户需要的配置： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170171172173174175176177178179180181182183184185186187188189190191192193194195196197198199200201202203204205206207208209210211212213214215216217218219220221222223224225226227228229230231232233234235236237238239240241242243244245246247248249250251252253254255256257258259260261262263264265266267268269270271272273274275276277278279280281282283284285286287288289290291292293294295296297298299300301302303304305306307308309310311312313314315316317318319320321322323324325326327328329330331332333334335336337338339340341342343344345346347348349350351352353354355356357358359360361362363364365366367368369370371372373374375376377378379380381382383384385386387388389390391392393394395396397398399400401402403404405406407408409410411412413414415416417418419420421422423424425426427428429430431432433434435436437438439440441442443444445446447448449450451452453454455456457458459460461462463464465466467468469470471472473474475476477478479480481482483484485486487488489490491492493494495496497498499500501502503504505506507508509510511512513514515516517518519520521522523524525526527528529530531532533534535536537538539540541542543544545546547548549550551552553554555556557558559560561562563564565566567568569570571572573574575576577578579580581582583584585586587588589""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 显示相关 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""set shortmess=atI " 启动的时候不显示那个援助乌干达儿童的提示 "winpos 5 5 " 设定窗口位置 "set lines=40 columns=155 " 设定窗口大小 "set nu " 显示行号 set go= " 不要图形按钮 "color asmanian2 " 设置背景主题 set guifont=Courier_New:h10:cANSI " 设置字体 "syntax on " 语法高亮 autocmd InsertLeave * se nocul " 用浅色高亮当前行 autocmd InsertEnter * se cul " 用浅色高亮当前行 "set ruler " 显示标尺 set showcmd " 输入的命令显示出来，看的清楚些 "set cmdheight=1 " 命令行（在状态行下）的高度，设置为1 "set whichwrap+=&lt;,&gt;,h,l " 允许backspace和光标键跨越行边界(不建议) "set scrolloff=3 " 光标移动到buffer的顶部和底部时保持3行距离 set novisualbell " 不要闪烁(不明白) set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125; "状态行显示的内容 set laststatus=1 " 启动显示状态行(1),总是显示状态行(2) set foldenable " 允许折叠 set foldmethod=manual " 手动折叠 "set background=dark "背景使用黑色 set nocompatible "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 " 显示中文帮助if version &gt;= 603 set helplang=cn set encoding=utf-8endif" 设置配色方案"colorscheme murphy"字体 "if (has("gui_running")) " set guifont=Bitstream\ Vera\ Sans\ Mono\ 10 "endif set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8set fileencodings=ucs-bom,utf-8,cp936set fileencoding=utf-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""新文件标题"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""新建.c,.h,.sh,.java文件，自动插入文件头 autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" ""定义函数SetTitle，自动插入文件头 func SetTitle() "如果文件类型为.sh文件 if &amp;filetype == 'sh' call setline(1,"\#########################################################################") call append(line("."), "\# File Name: ".expand("%")) call append(line(".")+1, "\# Author: ma6174") call append(line(".")+2, "\# mail: ma6174@163.com") call append(line(".")+3, "\# Created Time: ".strftime("%c")) call append(line(".")+4, "\#########################################################################") call append(line(".")+5, "\#!/bin/bash") call append(line(".")+6, "") else call setline(1, "/*************************************************************************") call append(line("."), " &gt; File Name: ".expand("%")) call append(line(".")+1, " &gt; Author: ma6174") call append(line(".")+2, " &gt; Mail: ma6174@163.com ") call append(line(".")+3, " &gt; Created Time: ".strftime("%c")) call append(line(".")+4, " ************************************************************************/") call append(line(".")+5, "") endif if &amp;filetype == 'cpp' call append(line(".")+6, "#include&lt;iostream&gt;") call append(line(".")+7, "using namespace std;") call append(line(".")+8, "") endif if &amp;filetype == 'c' call append(line(".")+6, "#include&lt;stdio.h&gt;") call append(line(".")+7, "") endif "新建文件后，自动定位到文件末尾 autocmd BufNewFile * normal Gendfunc """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""键盘命令""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""nmap &lt;leader&gt;w :w!&lt;cr&gt;nmap &lt;leader&gt;f :find&lt;cr&gt;" 映射全选+复制 ctrl+amap &lt;C-A&gt; ggVGYmap! &lt;C-A&gt; &lt;Esc&gt;ggVGYmap &lt;F12&gt; gg=G" 选中状态下 Ctrl+c 复制vmap &lt;C-c&gt; "+y"去空行 nnoremap &lt;F2&gt; :g/^\s*$/d&lt;CR&gt; "比较文件 nnoremap &lt;C-F2&gt; :vert diffsplit "新建标签 map &lt;M-F2&gt; :tabnew&lt;CR&gt; "列出当前目录文件 map &lt;F3&gt; :tabnew .&lt;CR&gt; "打开树状文件目录 map &lt;C-F3&gt; \be "C，C++ 按F5编译运行map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;func! CompileRunGcc() exec "w" if &amp;filetype == 'c' exec "!g++ % -o %&lt;" exec "! ./%&lt;" elseif &amp;filetype == 'cpp' exec "!g++ % -o %&lt;" exec "! ./%&lt;" elseif &amp;filetype == 'java' exec "!javac %" exec "!java %&lt;" elseif &amp;filetype == 'sh' :!./% endifendfunc"C,C++的调试map &lt;F8&gt; :call Rungdb()&lt;CR&gt;func! Rungdb() exec "w" exec "!g++ % -g -o %&lt;" exec "!gdb ./%&lt;"endfunc""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""实用设置"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 设置当文件被改动时自动载入set autoread" quickfix模式autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;"代码补全 set completeopt=preview,menu "允许插件 filetype plugin on"共享剪贴板 set clipboard+=unnamed "从不备份 set nobackup"make 运行:set makeprg=g++\ -Wall\ \ %"自动保存set autowriteset ruler " 打开状态栏标尺set cursorline " 突出显示当前行set magic " 设置魔术set guioptions-=T " 隐藏工具栏set guioptions-=m " 隐藏菜单栏"set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\" 设置在状态行显示的信息set foldcolumn=0set foldmethod=indent set foldlevel=3 set foldenable " 开始折叠" 不要使用vi的键盘模式，而是vim自己的set nocompatible" 语法高亮set syntax=on" 去掉输入错误的提示声音set noeb" 在处理未保存或只读文件的时候，弹出确认set confirm" 自动缩进set autoindentset cindent" Tab键的宽度set tabstop=4" 统一缩进为4set softtabstop=4set shiftwidth=4" 不要用空格代替制表符set noexpandtab" 在行和段开始处使用制表符set smarttab" 显示行号set number" 历史记录数set history=1000"禁止生成临时文件set nobackupset noswapfile"搜索忽略大小写set ignorecase"搜索逐字符高亮set hlsearchset incsearch"行内替换set gdefault"编码设置set enc=utf-8set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936"语言设置set langmenu=zh_CN.UTF-8set helplang=cn" 我的状态行显示的内容（包括文件类型和解码）"set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125;"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]" 总是显示状态行set laststatus=2" 命令行（在状态行下）的高度，默认为1，这里是2set cmdheight=2" 侦测文件类型filetype on" 载入文件类型插件filetype plugin on" 为特定文件类型载入相关缩进文件filetype indent on" 保存全局变量set viminfo+=!" 带有如下符号的单词不要被换行分割set iskeyword+=_,$,@,%,#,-" 字符间插入的像素行数目set linespace=0" 增强模式中的命令行自动完成操作set wildmenu" 使回格键（backspace）正常处理indent, eol, start等set backspace=2" 允许backspace和光标键跨越行边界set whichwrap+=&lt;,&gt;,h,l" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）set mouse=aset selection=exclusiveset selectmode=mouse,key" 通过使用: commands命令，告诉我们文件的哪一行被改变过set report=0" 在被分割的窗口间显示空白，便于阅读set fillchars=vert:\ ,stl:\ ,stlnc:\" 高亮显示匹配的括号set showmatch" 匹配括号高亮的时间（单位是十分之一秒）set matchtime=1" 光标移动到buffer的顶部和底部时保持3行距离set scrolloff=3" 为C程序提供自动缩进set smartindent" 高亮显示普通txt文件（需要txt.vim脚本）au BufRead,BufNewFile * setfiletype txt"自动补全:inoremap ( ()&lt;ESC&gt;i:inoremap ) &lt;c-r&gt;=ClosePair(')')&lt;CR&gt;:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O:inoremap &#125; &lt;c-r&gt;=ClosePair('&#125;')&lt;CR&gt;:inoremap [ []&lt;ESC&gt;i:inoremap ] &lt;c-r&gt;=ClosePair(']')&lt;CR&gt;:inoremap " ""&lt;ESC&gt;i:inoremap ' ''&lt;ESC&gt;ifunction! ClosePair(char) if getline('.')[col('.') - 1] == a:char return "\&lt;Right&gt;" else return a:char endifendfunctionfiletype plugin indent on "打开文件类型检测, 加了这句才可以用智能补全set completeopt=longest,menu"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" CTags的设定 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""let Tlist_Sort_Type = "name" " 按照名称排序 let Tlist_Use_Right_Window = 1 " 在右侧显示窗口 let Tlist_Compart_Format = 1 " 压缩方式 let Tlist_Exist_OnlyWindow = 1 " 如果只有一个buffer，kill窗口也kill掉buffer let Tlist_File_Fold_Auto_Close = 0 " 不要关闭其他文件的tags let Tlist_Enable_Fold_Column = 0 " 不要显示折叠树 autocmd FileType java set tags+=D:\tools\java\tags "autocmd FileType h,cpp,cc,c set tags+=D:\tools\cpp\tags "let Tlist_Show_One_File=1 "不同时显示多个文件的tag，只显示当前文件的"设置tags set tags=tags "set autochdir """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""其他东东""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""默认打开Taglist let Tlist_Auto_Open=1 """""""""""""""""""""""""""""" " Tag list (ctags) """""""""""""""""""""""""""""""" let Tlist_Ctags_Cmd = '/usr/bin/ctags' let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的 let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist窗口" minibufexpl插件的一般设置let g:miniBufExplMapWindowNavVim = 1let g:miniBufExplMapWindowNavArrows = 1let g:miniBufExplMapCTabSwitchBufs = 1let g:miniBufExplModSelTarget = 1 --------------------- 作者：doctor_xiong 来源：CSDN 原文：https://blog.csdn.net/Doctor_xiong/article/details/78663590 版权声明：本文为博主原创文章，转载请附上博文链接！""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 显示相关 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""set shortmess=atI " 启动的时候不显示那个援助乌干达儿童的提示 "winpos 5 5 " 设定窗口位置 "set lines=40 columns=155 " 设定窗口大小 "set nu " 显示行号 set go= " 不要图形按钮 "color asmanian2 " 设置背景主题 set guifont=Courier_New:h10:cANSI " 设置字体 "syntax on " 语法高亮 autocmd InsertLeave * se nocul " 用浅色高亮当前行 autocmd InsertEnter * se cul " 用浅色高亮当前行 "set ruler " 显示标尺 set showcmd " 输入的命令显示出来，看的清楚些 "set cmdheight=1 " 命令行（在状态行下）的高度，设置为1 "set whichwrap+=&lt;,&gt;,h,l " 允许backspace和光标键跨越行边界(不建议) "set scrolloff=3 " 光标移动到buffer的顶部和底部时保持3行距离 set novisualbell " 不要闪烁(不明白) set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125; "状态行显示的内容 set laststatus=1 " 启动显示状态行(1),总是显示状态行(2) set foldenable " 允许折叠 set foldmethod=manual " 手动折叠 "set background=dark "背景使用黑色 set nocompatible "去掉讨厌的有关vi一致性模式，避免以前版本的一些bug和局限 " 显示中文帮助if version &gt;= 603 set helplang=cn set encoding=utf-8endif" 设置配色方案"colorscheme murphy"字体 "if (has("gui_running")) " set guifont=Bitstream\ Vera\ Sans\ Mono\ 10 "endif set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936set termencoding=utf-8set encoding=utf-8set fileencodings=ucs-bom,utf-8,cp936set fileencoding=utf-8""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""新文件标题"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""新建.c,.h,.sh,.java文件，自动插入文件头 autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" ""定义函数SetTitle，自动插入文件头 func SetTitle() "如果文件类型为.sh文件 if &amp;filetype == 'sh' call setline(1,"\#########################################################################") call append(line("."), "\# File Name: ".expand("%")) call append(line(".")+1, "\# Author: ma6174") call append(line(".")+2, "\# mail: ma6174@163.com") call append(line(".")+3, "\# Created Time: ".strftime("%c")) call append(line(".")+4, "\#########################################################################") call append(line(".")+5, "\#!/bin/bash") call append(line(".")+6, "") else call setline(1, "/*************************************************************************") call append(line("."), " &gt; File Name: ".expand("%")) call append(line(".")+1, " &gt; Author: ma6174") call append(line(".")+2, " &gt; Mail: ma6174@163.com ") call append(line(".")+3, " &gt; Created Time: ".strftime("%c")) call append(line(".")+4, " ************************************************************************/") call append(line(".")+5, "") endif if &amp;filetype == 'cpp' call append(line(".")+6, "#include&lt;iostream&gt;") call append(line(".")+7, "using namespace std;") call append(line(".")+8, "") endif if &amp;filetype == 'c' call append(line(".")+6, "#include&lt;stdio.h&gt;") call append(line(".")+7, "") endif "新建文件后，自动定位到文件末尾 autocmd BufNewFile * normal Gendfunc """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""键盘命令""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""nmap &lt;leader&gt;w :w!&lt;cr&gt;nmap &lt;leader&gt;f :find&lt;cr&gt;" 映射全选+复制 ctrl+amap &lt;C-A&gt; ggVGYmap! &lt;C-A&gt; &lt;Esc&gt;ggVGYmap &lt;F12&gt; gg=G" 选中状态下 Ctrl+c 复制vmap &lt;C-c&gt; "+y"去空行 nnoremap &lt;F2&gt; :g/^\s*$/d&lt;CR&gt; "比较文件 nnoremap &lt;C-F2&gt; :vert diffsplit "新建标签 map &lt;M-F2&gt; :tabnew&lt;CR&gt; "列出当前目录文件 map &lt;F3&gt; :tabnew .&lt;CR&gt; "打开树状文件目录 map &lt;C-F3&gt; \be "C，C++ 按F5编译运行map &lt;F5&gt; :call CompileRunGcc()&lt;CR&gt;func! CompileRunGcc() exec "w" if &amp;filetype == 'c' exec "!g++ % -o %&lt;" exec "! ./%&lt;" elseif &amp;filetype == 'cpp' exec "!g++ % -o %&lt;" exec "! ./%&lt;" elseif &amp;filetype == 'java' exec "!javac %" exec "!java %&lt;" elseif &amp;filetype == 'sh' :!./% endifendfunc"C,C++的调试map &lt;F8&gt; :call Rungdb()&lt;CR&gt;func! Rungdb() exec "w" exec "!g++ % -g -o %&lt;" exec "!gdb ./%&lt;"endfunc""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""实用设置"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" 设置当文件被改动时自动载入set autoread" quickfix模式autocmd FileType c,cpp map &lt;buffer&gt; &lt;leader&gt;&lt;space&gt; :w&lt;cr&gt;:make&lt;cr&gt;"代码补全 set completeopt=preview,menu "允许插件 filetype plugin on"共享剪贴板 set clipboard+=unnamed "从不备份 set nobackup"make 运行:set makeprg=g++\ -Wall\ \ %"自动保存set autowriteset ruler " 打开状态栏标尺set cursorline " 突出显示当前行set magic " 设置魔术set guioptions-=T " 隐藏工具栏set guioptions-=m " 隐藏菜单栏"set statusline=\ %&lt;%F[%1*%M%*%n%R%H]%=\ %y\ %0(%&#123;&amp;fileformat&#125;\ %&#123;&amp;encoding&#125;\ %c:%l/%L%)\" 设置在状态行显示的信息set foldcolumn=0set foldmethod=indent set foldlevel=3 set foldenable " 开始折叠" 不要使用vi的键盘模式，而是vim自己的set nocompatible" 语法高亮set syntax=on" 去掉输入错误的提示声音set noeb" 在处理未保存或只读文件的时候，弹出确认set confirm" 自动缩进set autoindentset cindent" Tab键的宽度set tabstop=4" 统一缩进为4set softtabstop=4set shiftwidth=4" 不要用空格代替制表符set noexpandtab" 在行和段开始处使用制表符set smarttab" 显示行号set number" 历史记录数set history=1000"禁止生成临时文件set nobackupset noswapfile"搜索忽略大小写set ignorecase"搜索逐字符高亮set hlsearchset incsearch"行内替换set gdefault"编码设置set enc=utf-8set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936"语言设置set langmenu=zh_CN.UTF-8set helplang=cn" 我的状态行显示的内容（包括文件类型和解码）"set statusline=%F%m%r%h%w\ [FORMAT=%&#123;&amp;ff&#125;]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %&#123;strftime(\"%d/%m/%y\ -\ %H:%M\")&#125;"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]" 总是显示状态行set laststatus=2" 命令行（在状态行下）的高度，默认为1，这里是2set cmdheight=2" 侦测文件类型filetype on" 载入文件类型插件filetype plugin on" 为特定文件类型载入相关缩进文件filetype indent on" 保存全局变量set viminfo+=!" 带有如下符号的单词不要被换行分割set iskeyword+=_,$,@,%,#,-" 字符间插入的像素行数目set linespace=0" 增强模式中的命令行自动完成操作set wildmenu" 使回格键（backspace）正常处理indent, eol, start等set backspace=2" 允许backspace和光标键跨越行边界set whichwrap+=&lt;,&gt;,h,l" 可以在buffer的任何地方使用鼠标（类似office中在工作区双击鼠标定位）set mouse=aset selection=exclusiveset selectmode=mouse,key" 通过使用: commands命令，告诉我们文件的哪一行被改变过set report=0" 在被分割的窗口间显示空白，便于阅读set fillchars=vert:\ ,stl:\ ,stlnc:\" 高亮显示匹配的括号set showmatch" 匹配括号高亮的时间（单位是十分之一秒）set matchtime=1" 光标移动到buffer的顶部和底部时保持3行距离set scrolloff=3" 为C程序提供自动缩进set smartindent" 高亮显示普通txt文件（需要txt.vim脚本）au BufRead,BufNewFile * setfiletype txt"自动补全:inoremap ( ()&lt;ESC&gt;i:inoremap ) &lt;c-r&gt;=ClosePair(')')&lt;CR&gt;:inoremap &#123; &#123;&lt;CR&gt;&#125;&lt;ESC&gt;O:inoremap &#125; &lt;c-r&gt;=ClosePair('&#125;')&lt;CR&gt;:inoremap [ []&lt;ESC&gt;i:inoremap ] &lt;c-r&gt;=ClosePair(']')&lt;CR&gt;:inoremap " ""&lt;ESC&gt;i:inoremap ' ''&lt;ESC&gt;ifunction! ClosePair(char) if getline('.')[col('.') - 1] == a:char return "\&lt;Right&gt;" else return a:char endifendfunctionfiletype plugin indent on "打开文件类型检测, 加了这句才可以用智能补全set completeopt=longest,menu"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""" CTags的设定 """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""let Tlist_Sort_Type = "name" " 按照名称排序 let Tlist_Use_Right_Window = 1 " 在右侧显示窗口 let Tlist_Compart_Format = 1 " 压缩方式 let Tlist_Exist_OnlyWindow = 1 " 如果只有一个buffer，kill窗口也kill掉buffer let Tlist_File_Fold_Auto_Close = 0 " 不要关闭其他文件的tags let Tlist_Enable_Fold_Column = 0 " 不要显示折叠树 autocmd FileType java set tags+=D:\tools\java\tags "autocmd FileType h,cpp,cc,c set tags+=D:\tools\cpp\tags "let Tlist_Show_One_File=1 "不同时显示多个文件的tag，只显示当前文件的"设置tags set tags=tags "set autochdir """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""其他东东""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""默认打开Taglist let Tlist_Auto_Open=1 """""""""""""""""""""""""""""" " Tag list (ctags) """""""""""""""""""""""""""""""" let Tlist_Ctags_Cmd = '/usr/bin/ctags' let Tlist_Show_One_File = 1 "不同时显示多个文件的tag，只显示当前文件的 let Tlist_Exit_OnlyWindow = 1 "如果taglist窗口是最后一个窗口，则退出vim let Tlist_Use_Right_Window = 1 "在右侧窗口中显示taglist窗口" minibufexpl插件的一般设置let g:miniBufExplMapWindowNavVim = 1let g:miniBufExplMapWindowNavArrows = 1let g:miniBufExplMapCTabSwitchBufs = 1let g:miniBufExplModSelTarget = 1]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[notification]]></title>
    <url>%2F2019%2F08%2F21%2FNotification%2F</url>
    <content type="text"><![CDATA[注意必须是HTTPS 才能开启通知 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;Notification&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;script type="text/javascript"&gt; Notification.requestPermission().then(function(result) &#123; if (result === 'denied') &#123; console.log('被拒绝'); return; &#125; if (result === 'default') &#123; console.log('The permission request was dismissed.'); return; &#125; // Do something with the granted permission. function notice() &#123; var notification = new Notification("你好，JavaScript",&#123; body:'微信订阅号', &#125;); notification.onclick = function()&#123; notification.close() &#125; &#125; &#125;); &lt;/script&gt; &lt;/body&gt; &lt;/html&gt; 手册地址 https://developer.mozilla.org/zh-CN/docs/Web/API/notification/Notification]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
</search>
